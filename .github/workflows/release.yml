name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Git Commit Hash
        id: git_commit
        run: |
          echo "::set-output name=hash::$(git rev-parse HEAD)"

      - name: Install Linux Dependencies
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get install -y libusb-1.0-0 libusb-1.0-0-dev libdbus-1-dev
      - name: Install macOS Dependencies
        if: contains(matrix.os, 'macos')
        run: |
          brew install coreutils gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
      - name: Install Windows Dependencies
        if: contains(matrix.os, 'windows')
        run: choco install zip

      - name: Install Rust Toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          override: true
          components: rustfmt, clippy

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('Cargo.lock') }}-git-${{ steps.git_commit.outputs.hash }}
          restore-keys: |
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('Cargo.lock') }}-
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.rustc_hash }}-
            build-${{ runner.os }}-

      - name: rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - name: "Clippy (No Features)"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --locked --tests -- -D warnings
      - name: "Clippy (All Features)"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features=all --locked --tests -- -D warnings

      - name: "Test (No Features)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release
      - name: "Test (No strict-caller)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features=notification,encryption,yubikey
      - name: "Test (All Features)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features=all

      - name: "Build (No Features)"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: "Pack (No Features)"
        id: pack_minimal
        run: |
          zip -j "./${{ matrix.os }}-minimal.zip" target/release/git-credential-keepassxc target/release/git-credential-keepassxc.exe
          echo "::set-output name=filename::${{ matrix.os }}-minimal"
      - name: "Hash (No Features, Unix)"
        if: "!contains(matrix.os, 'windows')"
        run: |
          echo "$(sha256sum ${{ steps.pack_minimal.outputs.filename }}.zip | cut -d ' ' -f 1)" > ${{ steps.pack_minimal.outputs.filename }}.zip.sha256sum
          cat ${{ steps.pack_minimal.outputs.filename }}.zip.sha256sum
      - name: "Hash (No Features, Windows)"
        if: contains(matrix.os, 'windows')
        run: |
          $FileHash=(certutil -hashfile ${{ steps.pack_minimal.outputs.filename }}.zip SHA256 | findstr /v hash | findstr /v SHA).replace(" ", "")
          echo "$FileHash"
          echo "$FileHash" > ${{ steps.pack_minimal.outputs.filename }}.zip.sha256sum
      - name: "Upload (No Features)"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.pack_minimal.outputs.filename }}.zip
          asset_name: ${{ steps.pack_minimal.outputs.filename }}.zip
          asset_content_type: application/zip
      - name: "Upload Hash (No Features)"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.pack_minimal.outputs.filename }}.zip.sha256sum
          asset_name: ${{ steps.pack_minimal.outputs.filename }}.zip.sha256sum
          asset_content_type: text/plain

      - name: "Build (All Features)"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=all
      - name: "Pack (All Features)"
        id: pack_full
        run: |
          zip -j "./${{ matrix.os }}-full.zip" target/release/git-credential-keepassxc target/release/git-credential-keepassxc.exe
          echo "::set-output name=filename::${{ matrix.os }}-full"
      - name: "Hash (All Features, Unix)"
        if: "!contains(matrix.os, 'windows')"
        run: |
          echo "$(sha256sum ${{ steps.pack_full.outputs.filename }}.zip | cut -d ' ' -f 1)" > ${{ steps.pack_full.outputs.filename }}.zip.sha256sum
          cat ${{ steps.pack_full.outputs.filename }}.zip.sha256sum
      - name: "Hash (All Features, Windows)"
        if: contains(matrix.os, 'windows')
        run: |
          $FileHash=(certutil -hashfile ${{ steps.pack_full.outputs.filename }}.zip SHA256 | findstr /v hash | findstr /v SHA).replace(" ", "")
          echo "$FileHash"
          echo "$FileHash" > ${{ steps.pack_full.outputs.filename }}.zip.sha256sum
      - name: "Upload (All Features)"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.pack_full.outputs.filename }}.zip
          asset_name: ${{ steps.pack_full.outputs.filename }}.zip
          asset_content_type: application/zip
      - name: "Upload Hash (All Features)"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.pack_full.outputs.filename }}.zip.sha256sum
          asset_name: ${{ steps.pack_full.outputs.filename }}.zip.sha256sum
          asset_content_type: text/plain

  publish_release:
    runs-on: ubuntu-latest
    needs: [create_release, build]
    steps:
      - name: Publish Release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create_release.outputs.release_id }}
