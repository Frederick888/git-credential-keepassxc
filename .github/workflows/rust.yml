name: Build and Test

on:
  pull_request:
  push:
    branches:
      - "master"
    tags-ignore:
      - "*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust_toolchain: [stable]
        experimental: [false]
        include:
          - os: ubuntu-latest
            rust_toolchain: nightly
            experimental: true
          - os: macos-latest
            rust_toolchain: nightly
            experimental: true
          - os: windows-latest
            rust_toolchain: nightly
            experimental: true

    steps:
      - uses: actions/checkout@v3

      - name: Cancel Previous Runs
        if: contains(matrix.os, 'ubuntu')
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Install Linux Dependencies
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get install -y libusb-1.0-0 libusb-1.0-0-dev libdbus-1-dev
      - name: Install macOS Dependencies
        if: contains(matrix.os, 'macos')
        run: |
          brew install coreutils gnu-tar
          echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV

      - name: Install Rust Toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          default: true
          override: true
          components: rustfmt, clippy
      - name: Add macOS Targets
        if: contains(matrix.os, 'macos')
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('Cargo.lock') }}-git-${{ github.sha }}
          restore-keys: |
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.rustc_hash }}-lock-${{ hashFiles('Cargo.lock') }}-
            build-${{ runner.os }}-rustc-${{ steps.rust_toolchain.outputs.rustc_hash }}-
            build-${{ runner.os }}-

      - name: rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check
      - name: "Clippy (No Features)"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --locked --tests -- -D warnings
      - name: "Clippy (All Features)"
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --features=all --locked --tests -- -D warnings

      - name: "Build (No Features, Linux/Windows)"
        if: "!contains(matrix.os, 'macos')"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: "Build (No Features, macOS x86_64)"
        if: contains(matrix.os, 'macos')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=x86_64-apple-darwin
      - name: "Build (No Features, macOS aarch64)"
        if: contains(matrix.os, 'macos')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=aarch64-apple-darwin
      - name: macOS Universal Binary (No Features)
        if: contains(matrix.os, 'macos')
        run: |
          mkdir -p target/release/
          lipo -create -output target/release/git-credential-keepassxc target/x86_64-apple-darwin/release/git-credential-keepassxc target/aarch64-apple-darwin/release/git-credential-keepassxc
          file target/release/git-credential-keepassxc
      - name: "Artifacts (No Features)"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.rust_toolchain }}-minimal
          retention-days: 60
          path: |
            target/release/git-credential-keepassxc
            target/release/git-credential-keepassxc.exe
      - name: "Build (notification)"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=notification
      - name: "Build (encryption)"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=encryption
      - name: "Build (yubikey)"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=yubikey
      - name: "Build (all, Linux/Windows)"
        if: "!contains(matrix.os, 'macos')"
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=all
      - name: "Build (all, macOS x86_64)"
        if: contains(matrix.os, 'macos')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=all --target=x86_64-apple-darwin
      - name: "Build (all, macOS aarch64)"
        if: contains(matrix.os, 'macos')
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features=all --target=aarch64-apple-darwin
      - name: macOS Universal Binary (all)
        if: contains(matrix.os, 'macos')
        run: |
          mkdir -p target/release/
          lipo -create -output target/release/git-credential-keepassxc target/x86_64-apple-darwin/release/git-credential-keepassxc target/aarch64-apple-darwin/release/git-credential-keepassxc
          file target/release/git-credential-keepassxc
      - name: "Artifacts (All Features)"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.rust_toolchain }}-full
          retention-days: 60
          path: |
            target/release/git-credential-keepassxc
            target/release/git-credential-keepassxc.exe

      - name: "Test (No Features)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release
      - name: "Test (No strict-caller)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features=notification,encryption,yubikey
      - name: "Test (All Features)"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features=all
